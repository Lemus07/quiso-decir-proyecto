/*****************************************************************************************************************
 UNIVERSIDAD NACIONAL AUTONOMA DE MEXICO
 FACULTAD DE ESTUDIOS SUPERIORES -ARAGON-
 Computadoras y programacion.
 (c)
 Quiso decir
******************************************************************************************************************/
#include "stdafx.h"
#include <string.h>
#include "corrector.h"
#include <stdlib.h>
#include <ctype.h>
#define LONGITUD 32
char abecedario[LONGITUD + 6] = "abcdefghijklmn√±opqrstuvwxyz";
void Diccionario(char* szNombre, char szPalabras[][TAMTOKEN], int iEstadisticas[], int& iNumElementos)
{
    iNumElementos = 1;
    strcpy(szPalabras[0], "AquiVaElDiccionario");
    iEstadisticas[0] = 1; 
    FILE* fp;
    iNumElementos = 0;
    int i;  
    char lectura, array[TAMTOKEN];
    
    for (i = 0; i < NUMPALABRAS; i++)
        iEstadisticas[i] = 0;
    fopen_s(&fp, szNombre, "r");
    
    int contador = 0;
  
    char puntuacion[] = " \t\n\r.,;() ";
    char puntuacion2[] = { ',',';','.','(',')',9,10,13,32 } ;
    if (fp == NULL)
        return;
    
    while ((lectura = fgetc(fp)) != EOF)
    {
       
        bool bandera = true;
        
        lectura = tolower(lectura);
        
        for (i = 0; i < strlen(puntuacion); i++)
            
            if (puntuacion[i] == lectura)
                bandera = false;
        
        if (contador < TAMTOKEN && bandera)
        {
            
            array[contador++] = lectura;
            continue;
        }
        
        else if (contador == 0)
            continue;
       
        else if (contador == 1 && bandera)
        {
            contador = 0;
            continue;
        }
        
        array[contador] = '\0';
        
        for (i = 0; i < iNumElementos && !bandera; i++)
        {
           
            if (strcmp(szPalabras[i], array) == 0)
            {
               
                iEstadisticas[i]++;
                bandera = true;
            }
        }
        
        if (!bandera)
        {
         
            strcpy_s(szPalabras[iNumElementos], array);
            iEstadisticas[iNumElementos++]++;
        }
        contador = 0;
    }
    fclose(fp);
    iEstadisticas[iNumElementos] = 1;
    
    for (int j = 0; j < iNumElementos - 1; j++)
    {
        for (i = j + 1; i < iNumElementos; i++)
        {
            if (strcmp(szPalabras[j], szPalabras[i]) > 0)
            {
                strcpy_s(array, szPalabras[j]);
                strcpy_s(szPalabras[j], szPalabras[i]);
                strcpy_s(szPalabras[i], array);
                contador = iEstadisticas[j];
                iEstadisticas[j] = iEstadisticas[i];
                iEstadisticas[i] = contador;
            }
        }
void ClonaPalabras(
 char* szPalabraLeida, 
 char szPalabrasSugeridas[][TAMTOKEN], 
 int& iNumSugeridas) 
{
    strcpy(szPalabrasSugeridas[0], szPalabraLeida); 
    iNumSugeridas = 1; 
    
    char aux[TAMTOKEN]; iNumSugeridas = 0;
    
    strcpy_s(aux, szPalabraLeida);
    
    for (int i = 0; i < strlen(szPalabraLeida); i++)
    {
        for (int j = 0; j < LONGITUD; j++)
        {
            aux[i] = abecedario[j];
            
            strcpy_s(szPalabrasSugeridas[iNumSugeridas++], aux);
        }
        aux[i] = szPalabraLeida[i];
    }
    }
}
 int k;
 for (k = 1; k < strlen(szPalabraLeida) + 1; k++)
 {
     aux[k] = szPalabraLeida[k - 1];

 }
 aux[k] = '\0';
 for (int i = 0; i < strlen(szPalabraLeida) + 1; i++)
 {
     for (int j = 0; j < LONGITUD; j++)
     {
         aux[i] = abecedario[j];

         strcpy_s(szPalabrasSugeridas[iNumSugeridas++], aux);
     }
     aux[i] = szPalabraLeida[i];
 }
    //Para suprimir los caracteres
    int contador = 0;
    for (int i = 0; i < strlen(szPalabraLeida) && strlen(szPalabraLeida) != 1; i++)
    {
        for (int j = 0; j < strlen(szPalabraLeida); j++)
        {
            if (j != i)
                aux[contador++] = szPalabraLeida[j];
           
        }
        aux[contador] = '\0';
        /*Numero de elementos en la lista a la Lista de palabras clonadas*/
        strcpy_s(szPalabrasSugeridas[iNumSugeridas++], aux);
        
        strcpy_s(aux, szPalabraLeida);
        contador = 0;
    }
    
    for (int i = 0; i < strlen(szPalabraLeida) - 1; i++)
    {
        aux[i] = szPalabraLeida[i + 1];
        aux[i + 1] = szPalabraLeida[i];
        
        strcpy_s(szPalabrasSugeridas[iNumSugeridas++], aux);
       
        strcpy_s(aux, szPalabraLeida);
    }
    strcpy_s(szPalabrasSugeridas[iNumSugeridas++], szPalabraLeida);
    
    for (int j = 0; j < iNumSugeridas - 1; j++)
    {
        for (int i = j + 1; i < iNumSugeridas; i++)
        {
            if (strcmp(szPalabrasSugeridas[j], szPalabrasSugeridas[i]) > 0)
            {
                /*Lista de palabras clonadas al aux*/
                strcpy_s(aux, szPalabrasSugeridas[j]);
                strcpy_s(szPalabrasSugeridas[j], szPalabrasSugeridas[i]);
                strcpy_s(szPalabrasSugeridas[i], aux);
            }
        }
    }
}
void ListaCandidatas(
 char szPalabrasSugeridas[][TAMTOKEN], 
 int iNumSugeridas, 
 char szPalabras[][TAMTOKEN], 
 int iEstadisticas[], 
 int iNumElementos, 
 char szListaFinal[][TAMTOKEN], 
 int iPeso[], 
 int& iNumLista) 
{
    iNumLista = 0;
    for (int i = 0; i < iNumSugeridas; i++)
    {
        for (int j = 0; j < iNumElementos; j++)
        {
            /*Comparar de Lista de palabras del diccionario con la Lista de palabras clonadas */
            if (strcmp(szPalabrasSugeridas[i], szPalabras[j]) == 0)
            {
                
                bool bandera = false;
                for (int k = 0; k < iNumLista && !bandera; k++)
                    /*Comparar de Lista de palabras del diccionario con Lista final de palabras a sugerir*/
                    if (strcmp(szListaFinal[k], szPalabras[j]) == 0)
                        bandera = true;
                
                if (bandera) continue;
               
                strcpy_s(szListaFinal[iNumLista], szPalabrasSugeridas[i]);
                iPeso[iNumLista++] = iEstadisticas[j];
            }
        }
    }
    /*Comprobar con Numero de elementos en la szListaFinal*/
    
    for (int i = 0; i < iNumLista; i++)
    {
        for (int j = 0; j < iNumLista - 1; j++)
        {
            
            if (iPeso[j] < iPeso[j + 1])
            {
               
                int iaux; char caux[50];
                strcpy_s(caux, szListaFinal[j + 1]); iaux = iPeso[j + 1];
                strcpy_s(szListaFinal[j + 1], szListaFinal[j]); iPeso[j + 1] = iPeso[j];
                strcpy_s(szListaFinal[j], caux); iPeso[j] = iaux;
            }
        }
    }
}
